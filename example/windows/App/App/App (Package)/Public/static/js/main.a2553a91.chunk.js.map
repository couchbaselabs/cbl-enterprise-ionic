{"version":3,"sources":["../node_modules/@ionic/core/dist/esm-es5 lazy /^/.*/.entry/.js$/ groupOptions: {} namespace object","../node_modules/ionicons/dist/esm-es5 lazy /^/.*/.entry/.js$/ groupOptions: {} namespace object","pages/Home.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","keys","Object","module","exports","assert","v","msg","expecting","received","console","log","JSON","stringify","CBLTester","onDbOpenChange","database","database2","doc","replicator","lastDocId","output","isOpen","_createdDocs","_query1Results","_queryTestResults","config","DatabaseConfiguration","setEncryptionKey","Database","this","value","outputChanged","a","openDbs","addChangeListener","change","documentIDs","out","open","exists","doesExist","close","compact","deleteDatabase","createIndex","IndexBuilder","valueIndex","ValueIndexItem","property","index","fullTextIndex","FullTextIndexItem","setIgnoreAccents","deleteIndex","getIndexes","indexes","MutableDocument","setString","setArray","Array","really","setDictionary","size","isCool","setDate","Date","doc2","doc3","doc4","save","ConcurrencyControl","FAIL_ON_CONFLICT","push","getId","i","getPath","path","getCount","count","setBoolean","getDocument","toDictionary","deleteDocument","purgeDocument","query","QueryBuilder","select","SelectResult","all","expression","Meta","from","DataSource","where","Expression","equalTo","string","and","orderBy","Ordering","execute","ret","as","locationDoc","categoryDoc","hotelDoc","join","Join","on","toJson","allResults","results","whereClause","FullTextExpression","match","next","nextBatch","length","deleted","num","docs","forEach","result","rs","r","cleanup","newId","foundDoc","query1","start","targetEndpoint","URLEndpoint","replConfig","ReplicatorConfiguration","setReplicatorType","ReplicatorType","PUSH_AND_PULL","setContinuous","setAuthenticator","BasicAuthenticator","Replicator","error","stop","resetCheckpoint","getStatus","status","setLogLevel","LogDomain","ALL","LogLevel","VERBOSE","listener","setTimeout","removeChangeListener","n","which","wait","delete","base64","binary_string","window","atob","len","bytes","Uint8Array","charCodeAt","buffer","binary","byteLength","String","fromCharCode","btoa","setBlob","Blob","base64ToArrayBuffer","allDocs","newDoc","blob","getBlob","getBlobContent","blobContent","b64","arrayBufferToBase64","newBlob","newBlobContent","b642","init","documentCount","isMatch","name","type","asdf","testArray","items","someWithNull","next1","thedb10","query1From","expected","fun","ftsQuery","thisdb3","joinTest","message","Section","title","expanded","onToggle","children","className","onClick","icon","caretDownOutline","caretForwardOutline","Home","useRef","useState","setOutput","isDbOpen","setIsDbOpen","sections","setSections","toggleSection","useCallback","section","handleOpenChange","tester","useMemo","doChange","useEffect","slot","stopCircleOutline","color","style","fill","stroke","marginRight","playCircleOutline","fullscreen","collapse","testSuite","toggleLogLevel","setFileConfig","saveMany","update","all1","joinTest2","queryDeleted","query2","all2","allBatched","foreach1","queryCreateTest","queryCreateTestCleanup","documentIdTest","blobTest","replicatorStart","replicatorStop","replicatorResetCheckpoint","replicatorGetStatus","replicatorTest","replicatorTest2","height","dangerouslySetInnerHTML","__html","App","exact","to","Boolean","location","hostname","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"sFAAA,IAAIA,EAAM,CACT,8BAA+B,CAC9B,GACA,GAED,uBAAwB,CACvB,GACA,GAED,uBAAwB,CACvB,GACA,GAED,0BAA2B,CAC1B,GACA,IAED,6BAA8B,CAC7B,GACA,IAED,0BAA2B,CAC1B,GACA,IAED,0BAA2B,CAC1B,GACA,IAED,wBAAyB,CACxB,GACA,IAED,0BAA2B,CAC1B,GACA,IAED,sBAAuB,CACtB,GACA,IAED,uBAAwB,CACvB,IACA,IAED,4BAA6B,CAC5B,IACA,IAED,uBAAwB,CACvB,IACA,IAED,qBAAsB,CACrB,IACA,IAED,mCAAoC,CACnC,IACA,IAED,uBAAwB,CACvB,IACA,IAED,+BAAgC,CAC/B,IACA,IAED,wBAAyB,CACxB,IACA,IAED,yBAA0B,CACzB,IACA,IAED,wBAAyB,CACxB,IACA,IAED,uBAAwB,CACvB,IACA,GAED,uBAAwB,CACvB,IACA,IAED,yBAA0B,CACzB,IACA,GAED,8BAA+B,CAC9B,IACA,IAED,yBAA0B,CACzB,IACA,IAED,uBAAwB,CACvB,IACA,IAED,6BAA8B,CAC7B,IACA,IAED,2BAA4B,CAC3B,IACA,IAED,+BAAgC,CAC/B,IACA,IAED,yBAA0B,CACzB,IACA,IAED,2BAA4B,CAC3B,IACA,IAED,2BAA4B,CAC3B,IACA,IAED,0BAA2B,CAC1B,IACA,IAED,yBAA0B,CACzB,IACA,IAED,yBAA0B,CACzB,IACA,IAED,4BAA6B,CAC5B,IACA,IAED,2BAA4B,CAC3B,IACA,IAED,uBAAwB,CACvB,IACA,IAED,sBAAuB,CACtB,IACA,IAED,0BAA2B,CAC1B,IACA,IAED,uBAAwB,CACvB,IACA,IAED,wBAAyB,CACxB,IACA,IAED,gCAAiC,CAChC,IACA,KAGF,SAASC,EAAoBC,GAC5B,IAAIC,EAAoBC,EAAEJ,EAAKE,GAC9B,OAAOG,QAAQC,UAAUC,MAAK,WAC7B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBP,EAAM,KAEjD,MADAM,EAAEE,KAAO,mBACHF,KAIR,IAAIG,EAAMX,EAAIE,GAAMU,EAAKD,EAAI,GAC7B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","file":"static/js/main.a2553a91.chunk.js","sourcesContent":["var map = {\n\t\"./ion-action-sheet.entry.js\": [\n\t\t90,\n\t\t5\n\t],\n\t\"./ion-alert.entry.js\": [\n\t\t91,\n\t\t6\n\t],\n\t\"./ion-app_8.entry.js\": [\n\t\t92,\n\t\t7\n\t],\n\t\"./ion-avatar_3.entry.js\": [\n\t\t93,\n\t\t17\n\t],\n\t\"./ion-back-button.entry.js\": [\n\t\t94,\n\t\t18\n\t],\n\t\"./ion-backdrop.entry.js\": [\n\t\t95,\n\t\t43\n\t],\n\t\"./ion-button_2.entry.js\": [\n\t\t96,\n\t\t19\n\t],\n\t\"./ion-card_5.entry.js\": [\n\t\t97,\n\t\t20\n\t],\n\t\"./ion-checkbox.entry.js\": [\n\t\t98,\n\t\t21\n\t],\n\t\"./ion-chip.entry.js\": [\n\t\t99,\n\t\t22\n\t],\n\t\"./ion-col_3.entry.js\": [\n\t\t100,\n\t\t44\n\t],\n\t\"./ion-datetime_3.entry.js\": [\n\t\t101,\n\t\t10\n\t],\n\t\"./ion-fab_3.entry.js\": [\n\t\t102,\n\t\t23\n\t],\n\t\"./ion-img.entry.js\": [\n\t\t103,\n\t\t45\n\t],\n\t\"./ion-infinite-scroll_2.entry.js\": [\n\t\t104,\n\t\t46\n\t],\n\t\"./ion-input.entry.js\": [\n\t\t105,\n\t\t24\n\t],\n\t\"./ion-item-option_3.entry.js\": [\n\t\t106,\n\t\t25\n\t],\n\t\"./ion-item_8.entry.js\": [\n\t\t107,\n\t\t26\n\t],\n\t\"./ion-loading.entry.js\": [\n\t\t108,\n\t\t27\n\t],\n\t\"./ion-menu_3.entry.js\": [\n\t\t109,\n\t\t28\n\t],\n\t\"./ion-modal.entry.js\": [\n\t\t110,\n\t\t8\n\t],\n\t\"./ion-nav_2.entry.js\": [\n\t\t111,\n\t\t14\n\t],\n\t\"./ion-popover.entry.js\": [\n\t\t112,\n\t\t9\n\t],\n\t\"./ion-progress-bar.entry.js\": [\n\t\t113,\n\t\t29\n\t],\n\t\"./ion-radio_2.entry.js\": [\n\t\t114,\n\t\t30\n\t],\n\t\"./ion-range.entry.js\": [\n\t\t115,\n\t\t31\n\t],\n\t\"./ion-refresher_2.entry.js\": [\n\t\t116,\n\t\t11\n\t],\n\t\"./ion-reorder_2.entry.js\": [\n\t\t117,\n\t\t16\n\t],\n\t\"./ion-ripple-effect.entry.js\": [\n\t\t118,\n\t\t47\n\t],\n\t\"./ion-route_4.entry.js\": [\n\t\t119,\n\t\t32\n\t],\n\t\"./ion-searchbar.entry.js\": [\n\t\t120,\n\t\t33\n\t],\n\t\"./ion-segment_2.entry.js\": [\n\t\t121,\n\t\t34\n\t],\n\t\"./ion-select_3.entry.js\": [\n\t\t122,\n\t\t35\n\t],\n\t\"./ion-slide_2.entry.js\": [\n\t\t123,\n\t\t48\n\t],\n\t\"./ion-spinner.entry.js\": [\n\t\t124,\n\t\t13\n\t],\n\t\"./ion-split-pane.entry.js\": [\n\t\t125,\n\t\t49\n\t],\n\t\"./ion-tab-bar_2.entry.js\": [\n\t\t126,\n\t\t36\n\t],\n\t\"./ion-tab_2.entry.js\": [\n\t\t127,\n\t\t15\n\t],\n\t\"./ion-text.entry.js\": [\n\t\t128,\n\t\t37\n\t],\n\t\"./ion-textarea.entry.js\": [\n\t\t129,\n\t\t38\n\t],\n\t\"./ion-toast.entry.js\": [\n\t\t130,\n\t\t39\n\t],\n\t\"./ion-toggle.entry.js\": [\n\t\t131,\n\t\t12\n\t],\n\t\"./ion-virtual-scroll.entry.js\": [\n\t\t132,\n\t\t50\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 64;\nmodule.exports = webpackAsyncContext;","var map = {\n\t\"./ion-icon.entry.js\": [\n\t\t133,\n\t\t57\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 66;\nmodule.exports = webpackAsyncContext;","import {\n  IonButton,\n  IonButtons,\n  IonCard,\n  IonCardContent,\n  IonCardHeader,\n  IonCardTitle,\n  IonContent,\n  IonHeader,\n  IonIcon,\n  IonItem,\n  IonPage,\n  IonTitle,\n  IonToolbar,\n} from '@ionic/react';\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { isMatch } from 'lodash';\nimport {\n  caretDownOutline,\n  caretForwardOutline,\n  playCircleOutline,\n  stopCircleOutline,\n} from 'ionicons/icons';\nimport './Home.css';\n\nimport {\n  ArrayFunction,\n  BasicAuthenticator,\n  Blob,\n  ConcurrencyControl,\n  Database,\n  DatabaseChange,\n  DatabaseConfiguration,\n  DataSource,\n  Document,\n  Expression,\n  FullTextExpression,\n  FullTextIndexItem,\n  Function,\n  IndexBuilder,\n  Join,\n  LogDomain,\n  LogLevel,\n  Meta,\n  MutableDocument,\n  Ordering,\n  QueryBuilder,\n  Replicator,\n  ReplicatorChange,\n  ReplicatorConfiguration,\n  Result,\n  ResultSet,\n  SelectResult,\n  URLEndpoint,\n  ValueIndexItem,\n} from '@ionic-enterprise/couchbase-lite';\n\nconst assert = (v, msg = '', expecting = null, received = null) => {\n  console.log('%c[TEST] %s', 'color: #e8c93c; font-weight: bold', msg);\n  if (!v) {\n    throw new Error(\n      `${msg ? msg : `Test failed`}${\n        expecting\n          ? `\\nExpecting: \\n${\n              typeof expecting === 'object'\n                ? JSON.stringify(expecting, null, 2)\n                : expecting\n            }`\n          : null\n      }${\n        received\n          ? `\\nReceived:\\n${\n              typeof received === 'object'\n                ? JSON.stringify(received, null, 2)\n                : received\n            }`\n          : null\n      }`,\n    );\n  }\n};\n\nclass CBLTester {\n  database: Database;\n  database2: Database;\n  doc: MutableDocument;\n  replicator: Replicator;\n\n  lastDocId: string;\n  output: string;\n\n  isOpen = false;\n\n  _createdDocs: Document[] = [];\n\n  _query1Results: ResultSet;\n\n  _queryTestResults: ResultSet[] = [];\n\n  constructor(private onDbOpenChange: (isOpen) => void) {\n    console.log('IONIC CBL ON READY');\n    const config = new DatabaseConfiguration();\n    config.setEncryptionKey('secret');\n    const database = new Database('thedb10', config);\n    /*\n    database.setEngine(\n      new CapacitorEngine({\n        allResultsChunkSize: 9999,\n      }),\n    );\n    */\n    // const database2 = new Database(\"thedb6\", config)\n    // database2.setEngine(new CordovaEngine());\n    this.database = database;\n    //this.database2 = database2;\n  }\n\n  openDocRepl() {\n    // this.router.navigateByUrl('/document');\n  }\n\n  outputChanged(value: string) {}\n  out(value: string | any) {\n    if (typeof value === 'object') {\n      this.output = JSON.stringify(value, null, 2);\n    } else {\n      this.output = value;\n    }\n    this.outputChanged(this.output);\n  }\n\n  async init() {\n    await this.openDbs();\n    this.isOpen = true;\n    this.onDbOpenChange(this.isOpen);\n    this.database.addChangeListener((change: DatabaseChange) => {\n      console.log('DATABASE CHANGE', change, change.documentIDs);\n    });\n    this.out(`Opened db`);\n  }\n\n  async openDbs() {\n    await this.database.open();\n    // await this.database2.open();\n  }\n\n  async exists() {\n    let doesExist = await this.database.exists('test', 'test');\n    console.log('Does it exist?', doesExist);\n    this.out(`Exists? ${doesExist}`);\n  }\n\n  /*\n  async queryTest() {\n    if (!this.database) {\n      return;\n    }\n\n    const database = this.database;\n\n    const query1 = QueryBuilder.select(\n      SelectResult.expression(Meta.id),\n      SelectResult.property('name'),\n      SelectResult.property('type'),\n    )\n      .from(DataSource.database(database))\n      .where(Expression.property('type').equalTo(Expression.string('hotel')))\n      .orderBy(Ordering.expression(Meta.id));\n\n    const query2 = QueryBuilder.select(SelectResult.all())\n      .from(DataSource.database(database))\n      .where(Expression.property('type').equalTo(Expression.string('SDK')));\n\n    const query3 = QueryBuilder.select(SelectResult.all())\n      .from(DataSource.database(database))\n      .where(Expression.property('type').equalTo(Expression.string('hotel')))\n      .limit(Expression.intValue(10));\n\n    console.log('Query 3 to json', query3.toJson());\n\n    const query4 = QueryBuilder.select(\n      SelectResult.expression(Meta.id),\n      SelectResult.property('name'),\n      SelectResult.property('public_likes'),\n    )\n      .from(DataSource.database(database))\n      .where(\n        Expression.property('type')\n          .equalTo(Expression.string('hotel'))\n          .and(\n            ArrayFunction.contains(\n              Expression.property('public_likes'),\n              Expression.string('Armani Langworth'),\n            ),\n          ),\n      );\n\n    const values: Expression[] = [\n      Expression.property('first'),\n      Expression.property('last'),\n      Expression.property('username'),\n    ];\n\n    const query5 = QueryBuilder.select(SelectResult.all())\n      .from(DataSource.database(database))\n      .where(Expression.string('Armani').in(...values));\n\n    const query6 = QueryBuilder.select(\n      SelectResult.expression(Meta.id),\n      SelectResult.property('country'),\n      SelectResult.property('name'),\n    )\n      .from(DataSource.database(database))\n      .where(\n        Expression.property('type')\n          .equalTo(Expression.string('landmark'))\n          .and(\n            Expression.property('name').like(\n              Expression.string('Royal Engineers Museum'),\n            ),\n          ),\n      );\n\n    const query7 = QueryBuilder.select(\n      SelectResult.expression(Meta.id),\n      SelectResult.property('country'),\n      SelectResult.property('name'),\n    )\n      .from(DataSource.database(database))\n      .where(\n        Expression.property('type')\n          .equalTo(Expression.string('landmark'))\n          .and(Expression.property('name').like(Expression.string('Eng%e%'))),\n      );\n\n    const query8 = QueryBuilder.select(\n      SelectResult.expression(Meta.id),\n      SelectResult.property('country'),\n      SelectResult.property('name'),\n    )\n      .from(DataSource.database(database))\n      .where(\n        Expression.property('type')\n          .equalTo(Expression.string('landmark'))\n          .and(Expression.property('name').like(Expression.string('Eng____r'))),\n      );\n\n    const query9 = QueryBuilder.select(\n      SelectResult.expression(Meta.id),\n      SelectResult.property('country'),\n      SelectResult.property('name'),\n    )\n      .from(DataSource.database(database))\n      .where(\n        Expression.property('type')\n          .equalTo(Expression.string('landmark'))\n          .and(\n            Expression.property('name').regex(\n              Expression.string('\\\\bEng.*r\\\\b'),\n            ),\n          ),\n      );\n\n    const query10 = QueryBuilder.select(\n      SelectResult.expression(Expression.property('name').from('airline')),\n      SelectResult.expression(Expression.property('callsign').from('airline')),\n      SelectResult.expression(\n        Expression.property('destinationairport').from('route'),\n      ),\n      SelectResult.expression(Expression.property('stops').from('route')),\n      SelectResult.expression(Expression.property('airline').from('route')),\n    )\n      .from(DataSource.database(database).as('airline'))\n      .join(\n        Join.join(DataSource.database(database).as('route')).on(\n          Meta.id\n            .from('airline')\n            .equalTo(Expression.property('airlineid').from('route')),\n        ),\n      )\n      .where(\n        Expression.property('type')\n          .from('route')\n          .equalTo(Expression.string('route'))\n          .and(\n            Expression.property('type')\n              .from('airline')\n              .equalTo(Expression.string('airline')),\n          )\n          .and(\n            Expression.property('sourceairport')\n              .from('route')\n              .equalTo(Expression.string('RIX')),\n          ),\n      );\n\n    const query11 = QueryBuilder.select(\n      SelectResult.expression(Function.count(Expression.string('*'))),\n      SelectResult.property('country'),\n      SelectResult.property('tz'),\n    )\n      .from(DataSource.database(database))\n      .where(\n        Expression.property('type')\n          .equalTo(Expression.string('airport'))\n          .and(\n            Expression.property('geo.alt').greaterThanOrEqualTo(\n              Expression.intValue(300),\n            ),\n          ),\n      )\n      .groupBy(Expression.property('country'), Expression.property('tz'))\n      .orderBy(\n        Ordering.expression(\n          Function.count(Expression.string('*')),\n        ).descending(),\n      );\n\n    const query12 = QueryBuilder.select(\n      SelectResult.expression(Meta.id),\n      SelectResult.property('name'),\n    )\n      .from(DataSource.database(database))\n      .where(Expression.property('type').equalTo(Expression.string('hotel')))\n      .orderBy(Ordering.property('name').ascending())\n      .limit(Expression.intValue(10));\n\n    try {\n        // query1.toJson(),\n        // query2.toJson(),\n        // query3.toJson(),\n        // query4.toJson(),\n        // query5.toJson(),\n        // query6.toJson(),\n        // query7.toJson(),\n        // query8.toJson(),\n        // query9.toJson(),\n        // query10.toJson(),\n        // query11.toJson(),\n        // query12.toJson(),\n      ]);\n    } catch (e) {\n      this.out('Fail: ' + e);\n    }\n  }\n  */\n\n  async close() {\n    this.database && this.database.close();\n    this.isOpen = false;\n    this.onDbOpenChange(this.isOpen);\n    this.out(`Closed db`);\n  }\n\n  async compact() {\n    this.database && this.database.compact();\n    this.out(`Compacted db`);\n  }\n\n  async delete() {\n    if (!this.database) {\n      return;\n    }\n    await this.database.deleteDatabase();\n\n    this.out(`Deleted db`);\n  }\n\n  async createIndex() {\n    if (!this.database) {\n      return;\n    }\n\n    await this.database.createIndex(\n      'TypeNameIndex',\n      IndexBuilder.valueIndex(\n        ValueIndexItem.property('type'),\n        ValueIndexItem.property('name'),\n      ),\n    );\n\n    let index = IndexBuilder.fullTextIndex(FullTextIndexItem.property('name'));\n    index.setIgnoreAccents(false);\n    await this.database.createIndex('nameFTSIndex', index);\n\n    this.out(`Created indexes`);\n  }\n\n  async deleteIndex() {\n    if (!this.database) {\n      return;\n    }\n\n    await this.database.deleteIndex('TypeNameIndex');\n    this.out('Deleted index');\n  }\n\n  async getIndexes() {\n    if (!this.database) {\n      return;\n    }\n\n    const indexes = await this.database.getIndexes();\n    this.out(`Got indexes: ${indexes}`);\n  }\n\n  async save() {\n    let doc = new MutableDocument()\n      .setString('name', 'Escape')\n      .setString('type', 'hotel')\n      .setString('asdf', null)\n      .setArray('testArray', new Array())\n      .setArray('items', [\n        'hello',\n        {\n          really: 'cool',\n        },\n        123,\n        true,\n      ])\n      //.setBlob('profile', new Blob('image/jpeg', 'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNk+P//PwAGBAL/VJiKjgAAAABJRU5ErkJggg=='))\n      .setArray('someWithNull', [1, null, 4])\n      .setDictionary('config', {\n        size: 'large',\n        isCool: false,\n      })\n      .setDate('created', new Date());\n\n    let doc2 = new MutableDocument()\n      .setString('name', 'Space')\n      .setString('type', 'house')\n      .setDate('created', new Date());\n\n    let doc3 = new MutableDocument()\n      .setString('name', 'Ice Cream')\n      .setString('type', 'parlour')\n      .setDate('created', new Date());\n\n    let doc4 = new MutableDocument()\n      .setString('name', 'Sleep')\n      .setString('type', 'hotel')\n      .setDate('created', new Date());\n\n    await this.database.save(doc, ConcurrencyControl.FAIL_ON_CONFLICT);\n    await this.database.save(doc2);\n    await this.database.save(doc3);\n    await this.database.save(doc4);\n\n    this._createdDocs.push(...[doc, doc2, doc3, doc4]);\n\n    this.lastDocId = doc.getId();\n\n    console.log('Saved document, id is', doc.getId());\n\n    this.out(`Saved document. Last id ${doc.getId()}`);\n\n    this.doc = doc;\n  }\n\n  async saveMany() {\n    for (let i = 0; i < 10000; i++) {\n      let doc = new MutableDocument()\n        .setString('name', 'Saved Doc')\n        .setString('type', 'hotel')\n        .setString('asdf', null)\n        .setArray('items', [\n          'hello',\n          {\n            really: 'cool',\n          },\n          123,\n          true,\n        ])\n        .setArray('someWithNull', [1, null, 4])\n        .setDictionary('config', {\n          size: 'large',\n          isCool: false,\n        })\n        .setDate('created', new Date());\n      this.database.save(doc);\n    }\n    this.out(`Saved many`);\n  }\n\n  async getPath() {\n    if (!this.database) {\n      return;\n    }\n\n    const path = await this.database.getPath();\n\n    this.out(`DB path: ${path}`);\n    console.log(`DB path: ${path}`);\n  }\n\n  async getCount() {\n    if (!this.database) {\n      return;\n    }\n\n    const count = await this.database.getCount();\n\n    this.out(`Doc count: ${count}`);\n    console.log(`Doc count: ${count}`);\n    return count;\n  }\n\n  async update() {\n    if (!this.doc) {\n      return;\n    }\n\n    this.doc.setBoolean('isAwesome', true);\n\n    await this.database.save(this.doc);\n\n    this.out(`Updated document. id ${this.doc.getId()}`);\n\n    console.log('Updated document. Id is', this.doc.getId());\n  }\n\n  async getDocument() {\n    if (!this.lastDocId) {\n      return;\n    }\n    const doc = await this.database.getDocument(this.lastDocId);\n    console.log('Got document', doc);\n\n    this.out(doc.toDictionary());\n    return doc;\n  }\n\n  async deleteDocument() {\n    if (!this.lastDocId) {\n      return;\n    }\n    const doc = await this.database.getDocument(this.lastDocId);\n    console.log('Deleteing document', doc);\n\n    await this.database.deleteDocument(doc);\n\n    this.out(`Deleted document ${doc.getId()}`);\n  }\n\n  async purgeDocument() {\n    if (!this.lastDocId) {\n      return;\n    }\n    const doc = await this.database.getDocument(this.lastDocId);\n    console.log('Got document', doc);\n\n    await this.database.purgeDocument(doc);\n\n    this.out(`Purged document ${doc.getId()}`);\n  }\n\n  async query1() {\n    console.log('Building query 1');\n    let query = QueryBuilder.select(\n      SelectResult.all(),\n      SelectResult.property('name'),\n      SelectResult.expression(Meta.id),\n    )\n      .from(DataSource.database(this.database))\n      .where(\n        Expression.property('type')\n          .equalTo(Expression.string('hotel'))\n          .and(\n            Expression.property('name').equalTo(Expression.string('Escape')),\n          ),\n      )\n      .orderBy(Ordering.expression(Meta.id));\n\n    const ret = await query.execute();\n    this._query1Results = ret;\n    console.log('Executed query', ret);\n\n    this.out(`Executed query`);\n  }\n\n  async query1From() {\n    console.log('Building query 1');\n    let query = QueryBuilder.select(\n      SelectResult.all().from('fun'),\n      SelectResult.expression(Expression.property('name').from('fun')).as(\n        'name',\n      ),\n      SelectResult.expression(Meta.id.from('fun')).as('id'),\n    )\n      .from(DataSource.database(this.database).as('fun'))\n      .where(\n        Expression.property('type')\n          .from('fun')\n          .equalTo(Expression.string('hotel')),\n      )\n      .orderBy(Ordering.expression(Expression.property('fun').from('fun')));\n\n    const ret = await query.execute();\n    this._query1Results = ret;\n    console.log('Executed query', ret);\n\n    this.out(`Executed query`);\n  }\n\n  async joinTest() {\n    let locationDoc = new MutableDocument()\n      .setString('name', 'Madison')\n      .setString('type', 'location');\n    await this.database.save(locationDoc);\n\n    console.log('Location doc saved', locationDoc);\n\n    let categoryDoc = new MutableDocument()\n      .setString('name', 'Expensive')\n      .setString('type', 'expensive');\n    await this.database.save(categoryDoc);\n\n    console.log('Category doc saved', categoryDoc);\n\n    let hotelDoc = new MutableDocument()\n      .setString('name', 'Escape')\n      .setString('type', 'hotel')\n      .setString('hotel_locations_thing', 'what')\n      .setString('location_id', locationDoc.getId())\n      .setString('category_id', categoryDoc.getId());\n    await this.database.save(hotelDoc);\n\n    console.log('Hotel doc saved', hotelDoc);\n\n    console.log('Building query 2 from');\n    let query = QueryBuilder.select(\n      // SelectResult.all().from('hotel_locations'),\n      SelectResult.expression(Meta.id.from('categories')).as('categories.id'),\n      SelectResult.expression(Expression.property('name').from('locations')).as(\n        'name',\n      ),\n      SelectResult.expression(Meta.id.from('locations')).as('locations.id'),\n      SelectResult.expression(Meta.id.from('hotels')).as('hotels.id'),\n    )\n      .from(DataSource.database(this.database).as('hotels'))\n      .join(\n        Join.join(DataSource.database(this.database).as('locations')).on(\n          Meta.id\n            .from('locations')\n            .equalTo(Expression.property('location_id').from('hotels')),\n        ),\n        Join.join(DataSource.database(this.database).as('categories')).on(\n          Meta.id\n            .from('categories')\n            .equalTo(Expression.property('category_id').from('hotels')),\n        ),\n      )\n      .where(\n        Expression.property('type')\n          .from('hotels')\n          .equalTo(Expression.string('hotel'))\n          .and(\n            Expression.property('type')\n              .from('locations')\n              .equalTo(Expression.string('location')),\n          ),\n      );\n\n    console.log('Built join query');\n    console.log(query.toJson());\n    console.log(JSON.stringify(query.toJson(), null, 2));\n    const ret = await query.execute();\n    const results = await ret.allResults();\n    this.out(results);\n    return results;\n  }\n\n  async joinTest2() {\n    console.log('Building query 1');\n    let query = QueryBuilder.select(\n      SelectResult.all().from('fun'),\n      SelectResult.expression(Expression.property('name').from('fun')).as(\n        'name',\n      ),\n      SelectResult.expression(Meta.id.from('fun')).as('fun.id'),\n    )\n      .from(DataSource.database(this.database).as('fun'))\n      .where(\n        Expression.property('type')\n          .from('fun')\n          .equalTo(Expression.string('hotel')),\n      )\n      .orderBy(Ordering.expression(Meta.id.from('fun')));\n\n    const ret = await query.execute();\n    this._query1Results = ret;\n    console.log('Executed query', ret);\n\n    this.out(`Executed query`);\n  }\n\n  async ftsQuery() {\n    console.log('Building fts query 1');\n\n    let whereClause = FullTextExpression.index('nameFTSIndex').match('ice');\n    let query = QueryBuilder.select(SelectResult.all())\n      .from(DataSource.database(this.database))\n      .where(whereClause);\n\n    const ret = await query.execute();\n    this._query1Results = ret;\n    console.log('Executed fts query', ret);\n\n    this.out(`Executed fts query`);\n  }\n\n  async next1() {\n    if (!this._query1Results) {\n      return;\n    }\n    const ret = await this._query1Results.next();\n    console.log('Moved next', ret);\n    this.out(ret as any);\n    return ret;\n  }\n\n  async nextBatch() {\n    if (!this._query1Results) {\n      return;\n    }\n    const ret = await this._query1Results.nextBatch();\n    console.log('Moved next batch', ret);\n    this.out(`Next batch: ${ret.length}`);\n  }\n\n  async all1() {\n    if (!this._query1Results) {\n      return;\n    }\n    const ret = await this._query1Results.allResults();\n    console.log('All results', ret);\n    this.out(`All results (${ret.length}): ${JSON.stringify(ret)}`);\n  }\n\n  async queryDeleted() {\n    console.log('Building query deleted');\n    let query = QueryBuilder.select(\n      SelectResult.all(),\n      SelectResult.property('name'),\n      SelectResult.expression(Meta.id),\n    )\n      .from(DataSource.database(this.database))\n      .where(Meta.deleted);\n\n    const ret = await query.execute();\n    this._query1Results = ret;\n    const all = await ret.allResults();\n    console.log('Executed delete query', ret);\n    console.log(all);\n\n    this.out(`Executed deleted query`);\n  }\n\n  async query2() {\n    console.log('Building query 2');\n    let query = QueryBuilder.select(\n      SelectResult.all(),\n      SelectResult.property('name'),\n      SelectResult.expression(Meta.id),\n    )\n      .from(DataSource.database(this.database))\n      .where(\n        Expression.property('name').equalTo(Expression.string('Saved Doc')),\n      )\n      .orderBy(Ordering.expression(Meta.id));\n\n    const ret = await query.execute();\n    this._query1Results = ret;\n    console.log('Executed query', ret);\n\n    this.out(`Executed query`);\n  }\n\n  async all2() {\n    if (!this._query1Results) {\n      return;\n    }\n    const ret = await this._query1Results.allResults();\n    console.log('All results', ret.length);\n    this.out(`All results: ${ret.length}`);\n  }\n\n  async allBatched() {\n    if (!this._query1Results) {\n      return;\n    }\n\n    let num = 0;\n    let docs;\n    while ((docs = await this._query1Results.nextBatch()).length) {\n      console.log('Loaded ', docs.length);\n      num += docs.length;\n    }\n    console.log(docs && docs.length);\n    console.log('All results', num);\n    this.out(`All results: ${num}`);\n  }\n\n  async foreach1() {\n    if (!this._query1Results) {\n      return;\n    }\n    console.log('For each');\n    await this._query1Results.forEach((result: Result) => {\n      console.log('FOR', result);\n    });\n    this.out(`For query`);\n  }\n\n  async queryCreateTest() {\n    for (let i = 0; i < 10000; i++) {\n      let query = QueryBuilder.select(\n        SelectResult.all(),\n        SelectResult.property('name'),\n        SelectResult.expression(Meta.id),\n      )\n        .from(DataSource.database(this.database))\n        .where(Expression.property('type').equalTo(Expression.string('hotel')))\n        .orderBy(Ordering.expression(Meta.id));\n\n      query.execute().then(rs => this._queryTestResults.push(rs));\n    }\n  }\n\n  async queryCreateTestCleanup() {\n    this._queryTestResults.forEach(r => {\n      r.cleanup();\n    });\n    this._queryTestResults = [];\n  }\n\n  async rsCleanup() {\n    if (!this._query1Results) {\n      return;\n    }\n\n    this._query1Results.cleanup();\n  }\n\n  async documentIdTest() {\n    let doc = new MutableDocument()\n      .setString('id', 'SuperId2')\n      .setString('_id', 'SuperId');\n\n    await this.database.save(doc);\n\n    const newId = doc.getId();\n\n    console.log('Got doc id', newId);\n\n    const foundDoc = await this.database.getDocument(newId);\n\n    console.log('Found doc', foundDoc);\n    console.log(foundDoc.getId());\n\n    const query1 = QueryBuilder.select(\n      SelectResult.expression(Meta.id),\n      SelectResult.property('id'),\n    )\n      .from(DataSource.database(this.database))\n      //.where(Meta.id.equalTo(Expression.string('SuperId')));\n      .where(Expression.property('id').equalTo(Expression.string('SuperId2')));\n\n    const rs = await query1.execute();\n    const all = await rs.allResults();\n    console.log('Got all results', all);\n  }\n\n  async replicatorStart() {\n    if (!this.database) {\n      return;\n    }\n\n    if (this.replicator) {\n      await this.replicator.start();\n      this.out(`Replicator start`);\n      return;\n    }\n\n    const database = this.database;\n    // Create replicators to push and pull changes to and from the cloud.\n    const targetEndpoint = new URLEndpoint('ws://localhost:4984/thedb5');\n    const replConfig = new ReplicatorConfiguration(database, targetEndpoint);\n    replConfig.setReplicatorType(\n      ReplicatorConfiguration.ReplicatorType.PUSH_AND_PULL,\n    );\n    replConfig.setContinuous(true);\n\n    // Add authentication.\n    replConfig.setAuthenticator(\n      new BasicAuthenticator('sync_gateway', 'testtest'),\n    );\n    //replConfig.setAuthenticator(new SessionAuthenticator('12345', 'token'));\n\n    // Create replicator.\n    const replicator = new Replicator(replConfig);\n\n    // Listen to replicator change events.\n    replicator.addChangeListener((change: ReplicatorChange) => {\n      console.log('Replicator change!', JSON.stringify(change));\n      if (change.error) {\n        console.log('Error:: ', JSON.stringify(change.error));\n      }\n    });\n\n    // Start replication.\n    await replicator.start();\n\n    this.replicator = replicator;\n\n    this.out(`Replicator start`);\n  }\n\n  async replicatorStop() {\n    if (!this.replicator) {\n      return;\n    }\n\n    await this.replicator.stop();\n    this.out(`Replicator stop`);\n  }\n\n  async replicatorResetCheckpoint() {\n    if (!this.replicator) {\n      return;\n    }\n\n    await this.replicator.resetCheckpoint();\n    this.out(`Replicator reset checkpoint`);\n  }\n\n  async replicatorGetStatus() {\n    if (!this.replicator) {\n      return;\n    }\n\n    const status = await this.replicator.getStatus();\n    this.out(`Replicator getStatus: ${JSON.stringify(status)}`);\n  }\n\n  async toggleLogLevel() {\n    await this.database.setLogLevel(LogDomain.ALL, LogLevel.VERBOSE);\n    this.out(`Log level toggled`);\n  }\n\n  async setFileConfig() {\n    /*\n    try {\n      console.log('Setting file logging config in node');\n      const req = window.require;\n      const os = req('os');\n      const path = req('path');\n      console.log('Got path', os, path);\n      await this.database.log.setFileConfig({\n        level: LogLevel.VERBOSE,\n        directory: path.join(process.env.HOME, '.cblenterprise'),\n        maxRotateCount: 5\n      });\n      console.log('Configured logging!');\n    } catch {\n      */\n    /*\n    await this.database.log.setFileConfig({\n      level: LogLevel.VERBOSE,\n      directory: this.file.documentsDirectory,\n      maxRotateCount: 5,\n    });\n    */\n    /*\n  }\n  */\n  }\n\n  async replicatorTest() {\n    const database = this.database;\n    // Create replicators to push and pull changes to and from the cloud.\n    const targetEndpoint = new URLEndpoint('ws://localhost:4984/example_sg_db');\n    const replConfig = new ReplicatorConfiguration(database, targetEndpoint);\n    replConfig.setReplicatorType(\n      ReplicatorConfiguration.ReplicatorType.PUSH_AND_PULL,\n    );\n\n    // Add authentication.\n    // replConfig.setAuthenticator(new BasicAuthenticator('john', 'pass'));\n    // replConfig.setAuthenticator(new SessionAuthenticator('12345', 'token'));\n\n    // Create replicator.\n    const replicator = new Replicator(replConfig);\n\n    // Listen to replicator change events.\n    const listener = (change: ReplicatorChange) => {\n      console.log('Replicator change in here!', change);\n      if (change.error != null) {\n        console.log('Error code ::  ' + change.error);\n      }\n    };\n\n    replicator.addChangeListener(listener);\n\n    // Start replication.\n    await replicator.start();\n\n    this.replicator = replicator;\n\n    this.out(`Replicator start`);\n\n    setTimeout(() => {\n      this.out(`Replicator removed`);\n      replicator.removeChangeListener(listener);\n      setTimeout(() => {\n        this.out(`Replicator added again`);\n        replicator.addChangeListener(listener);\n      }, 2000);\n    }, 10000);\n  }\n\n  wait(n: number) {\n    return new Promise<void>(resolve => {\n      setTimeout(() => {\n        resolve();\n      }, n);\n    });\n  }\n\n  async replicatorTest2() {\n    const database = this.database;\n    // Create replicators to push and pull changes to and from the cloud.\n    const targetEndpoint = new URLEndpoint('ws://localhost:4984/example_sg_db');\n    const replConfig = new ReplicatorConfiguration(database, targetEndpoint);\n    replConfig.setReplicatorType(\n      ReplicatorConfiguration.ReplicatorType.PUSH_AND_PULL,\n    );\n\n    let which = 1;\n\n    // Add authentication.\n    replConfig.setAuthenticator(new BasicAuthenticator('john', 'pass'));\n    // replConfig.setAuthenticator(new SessionAuthenticator('12345', 'token'));\n    // Create replicator.\n    let replicator = new Replicator(replConfig);\n\n    // Listen to replicator change events.\n    const listener = (change: ReplicatorChange) => {\n      console.log('Replicator change for!', which, change);\n      if (change.error != null) {\n        console.log('Error code ::  ' + change.error);\n      }\n    };\n\n    replicator.addChangeListener(listener);\n\n    // Start replication.\n    await replicator.start();\n\n    await this.wait(2000);\n\n    await replicator.stop();\n    await replicator.cleanup();\n    await this.wait(5000);\n\n    replicator.removeChangeListener(listener);\n    await this.delete();\n    await this.database.open();\n\n    replicator = new Replicator(replConfig);\n\n    which = 2;\n\n    replicator.addChangeListener((change: ReplicatorChange) => {\n      console.log('Replicator change 222222 for!', which, change);\n      if (change.error != null) {\n        console.log('Error code ::  ' + change.error);\n      }\n    });\n\n    await replicator.start();\n  }\n\n  base64ToArrayBuffer(base64) {\n    var binary_string = window.atob(base64);\n    var len = binary_string.length;\n    var bytes = new Uint8Array(len);\n    for (var i = 0; i < len; i++) {\n      bytes[i] = binary_string.charCodeAt(i);\n    }\n    return bytes.buffer as ArrayBuffer;\n  }\n\n  arrayBufferToBase64(buffer: ArrayBuffer) {\n    var binary = '';\n    var bytes = new Uint8Array(buffer);\n    var len = bytes.byteLength;\n    for (var i = 0; i < len; i++) {\n      binary += String.fromCharCode(bytes[i]);\n    }\n    return window.btoa(binary);\n  }\n\n  async blobTest() {\n    let doc = new MutableDocument()\n      .setString('name', 'Thing')\n      .setBlob(\n        'profile',\n        new Blob(\n          'image/jpeg',\n          this.base64ToArrayBuffer(\n            'iVBORw0KGgoAAAANSUhEUgAAAH4AAAAsCAMAAACUu/xGAAAAq1BMVEUAAABlZVJlZVKsrJthYU+zs6Grq5ylpZazs6FlZVJfX01lZVJlZVKsrJurq5urq5xlZVKtrZ1lZVJlZVKvr52zs6GysqCoqJeqqpmzs6Grq5xlZVJgYE6zs6Gnp5mrq5yiopRjY1CRkX2rq5yzs6FlZVKRkX2goJKKineRkX2Pj3yrq5yIiHWRkX2RkX2RkX1lZVKRkX2rq5yzs6GoqJdfX02goJKHh3SHh3VrpzVsAAAAMHRSTlMAQIDHx3+Ax0Ag7qBgIA9AEFCPMLOgMO7bYKBQ24+zYNuzkY9wcAXu0oiocPFBMHYlVbK0AAAD3UlEQVRYw6SW7Y6qMBCGB0IkLfKdnB9ocFmjru7HERL03P+VnXY6bdmWjcF9f2inxjydvjMDcHy99zP693oEpTpQYjBR7W4VmzA81GoZCDn/ycrValVmYOJcKBWL1/4HnUEpupLGxOI47iQmDkfc4GEBEFyNQkClzYDKQQs3VmJBufu6G7zRWNMeUzEHUnLVWs/gy9vg4NNB4wUIPOG2h7e8NcV0HRt7QPDxfzTd4ptleB5F6ro3NtsIc7UnjMKKXyuN30ZS+PuLRMW7PN+l2vlhAZ6yqCZmcrm05stfOrwVpvEBaJWStIOpVk/gC8Rb62tjRj25Fx/fEsgqE27cluKB8GR9hDFzeX44CFbmJb9/Cn8w1ldA5tO9VD/gc8FpveTbxfi1LXWOl10Z80c0Yx7/jpyyjRtd9zuxU8ZL8FEYJjZFpg6yIfOpKsf1FJ+EUkzddKkabQ+o0zCcwMN/vZm+uLh4UmW7nptTCBVq5nUF4Y0CgBaNVip18jsPn370909cfX708/gusF3fkQfrKZHXHh45Wi8meRefvfVCfwGOZ9zx8TZ9TjWY2M6vVf4jm8e3WYrDJ1Vj4N3FHwVd6vKFCxefBMFmq7ub6UI7TMZw0SEv8ryPDVaoxPiWufhL/02zY0cm3ZH1VgxIIYa1U/nIibH/EZjjp4M/9w/x9FijbyuqdzOVH+BbWQJxHMupd4pjINhDPKVH1lslBl9g6OKb73j0wmoBHrMj691nsJ0QLn4l0/09nrIm6wv7nGdQqwjGucvPJSWjN4z8aXyBlkfK+i2gmDI/HENGjXA9uPhsUJ22p2OQFg3daaFx0/9qnWBRbOl9hHlvOw3OW/xs4Hf4rcnYzj+OeFOIHj4dtG7/2y+b3IhBGAqjUiQWQ9JI/ErDpop6gcei9z9ZIXHIhLaLSGRW8zYxIuaTZccxqsGfHDXvH4cf37Z4e3ihxVOTp5bf4E8N2u+3PWB2SP7tXsfsFl80rtOeZX/gvz6//7tmnFFzD2mkxnFgL710ToHH1eCcm/LU2aA9m027v+kBH8ipyHbACxAMWaV5I4v2ZgAzIxkUGXIqkn3xrhw4wVe8hoMmOwBmYJMiJy+lHPriNcSyrvgEgUS2h/vl1BcvSqgcZsPbbABrhgdgvhgvS6hIYsPP8MwTVR5SLZA4573xHMpCV7xGZBFmxyProfR64yNCgKh4hygjXIuvpdcbPyEayA2vsEpRHcgl6gtzr8A9ho0RlgQnBPoK4tV45gBfGQZ6KQBDqzRcjdeAqQwHUfYp+SohcQdc1/Ukm4Gw4dV6vqTkM+uQpRv8E2VPF/sPp9xSb2qlGH4AAAAASUVORK5CYII=',\n          ),\n        ),\n      );\n\n    await this.database.save(doc);\n\n    console.log('Saved doc', doc);\n    let query = QueryBuilder.select(\n      SelectResult.all(),\n      SelectResult.property('name'),\n      SelectResult.expression(Meta.id),\n    )\n      .from(DataSource.database(this.database))\n      .where(Expression.property('name').equalTo(Expression.string('Thing')));\n\n    const rs = await query.execute();\n\n    const allDocs = await rs.allResults();\n    console.log('Got all results', allDocs);\n    const newDoc = await this.database.getDocument(doc.getId());\n    console.log('Got new doc', newDoc);\n    const blob = doc.getBlob('profile');\n    const blobContent = await doc.getBlobContent('profile', this.database);\n    console.log('Got blob', blob);\n    console.log('Got blob content', blobContent);\n    const b64 = this.arrayBufferToBase64(blobContent);\n    console.log('Blob content to b64', b64);\n    const newBlob = newDoc.getBlob('profile');\n    const newBlobContent = await newDoc.getBlobContent(\n      'profile',\n      this.database,\n    );\n    console.log('Got new doc', newDoc);\n    console.log('Got new blob', newBlob);\n    const b642 = this.arrayBufferToBase64(newBlobContent);\n    console.log('Got new blob content', b642);\n    console.log(b642);\n    // console.log('Got profile blob', newDoc.getBlob('profile'));\n  }\n\n  async testSuite() {\n    try {\n      await this.init();\n\n      await this.wait(500);\n\n      await this.delete();\n\n      await this.init();\n\n      let documentCount = await this.getCount();\n      assert(documentCount === 0, 'Database is empty');\n\n      await this.save();\n\n      documentCount = await this.getCount();\n      assert(\n        documentCount === this._createdDocs.length,\n        'Count of docs equals ones we collected',\n      );\n\n      let doc: Document = this.doc;\n      assert(\n        doc.getId() === this.lastDocId,\n        'Last document id is the same as the one we stored',\n      );\n\n      doc = await this.getDocument();\n      assert(\n        isMatch(doc.toDictionary(), {\n          name: 'Escape',\n          type: 'hotel',\n          asdf: null,\n          testArray: [],\n          items: [\n            'hello',\n            {\n              really: 'cool',\n            },\n            123,\n            true,\n          ],\n          someWithNull: [1, null, 4],\n          config: {\n            size: 'large',\n            isCool: false,\n          },\n        }),\n        'Grabbing latest matches provided object',\n      );\n\n      console.log(doc.toDictionary());\n\n      await this.query1();\n\n      let ret = await this.next1();\n\n      console.log('Got ret', ret);\n\n      assert(\n        isMatch(ret, {\n          name: 'Escape',\n          thedb10: {\n            type: 'hotel',\n          },\n        }),\n        'Query doc matches',\n        {\n          name: 'Escape',\n          thedb10: {\n            type: 'hotel',\n          },\n        },\n        ret,\n      );\n\n      await this.query1From();\n\n      ret = await this.next1();\n\n      let expected: any = {\n        name: 'Escape',\n        // \"id\": \"-dn0azUFH0eKGHvxH_c0jvz\",\n        fun: {\n          config: {\n            isCool: false,\n            size: 'large',\n          },\n          someWithNull: [1, null, 4],\n          testArray: [],\n          items: [\n            'hello',\n            {\n              really: 'cool',\n            },\n            123,\n            true,\n          ],\n          //\"created\": \"2022-02-12T16:17:02.260Z\",\n          asdf: null,\n          name: 'Escape',\n          type: 'hotel',\n        },\n      };\n\n      assert(isMatch(ret, expected), 'Query 1 From matches', expected, ret);\n\n      await this.createIndex();\n      await this.ftsQuery();\n\n      ret = await this.next1();\n      expected = {\n        thisdb3: {\n          type: 'parlour',\n          name: 'Ice Cream',\n        },\n      };\n\n      console.log('Doing join test');\n\n      ret = await this.joinTest();\n\n      console.log('Finished join test', ret);\n      expected = [\n        {\n          'hotels.id': ret[0]['hotels.id'],\n          'locations.id': ret[0]['locations.id'],\n          'categories.id': ret[0]['categories.id'],\n          'name': 'Madison',\n        },\n      ];\n\n      assert(isMatch(ret, expected), 'Join test matches', expected, ret);\n\n      console.log('All tests pass!');\n      // Tear down\n      /*\n      await Promise.all(this._createdDocs.map(async d => {\n        await this.database.deleteDocument(d);\n        let newCount = await this.database.getCount();\n        assert(newCount === documentCount - 1, 'Document count is one less');\n        documentCount = newCount;\n      }));\n      */\n\n      this.out('Tests passed');\n    } catch (e) {\n      this.out(`Tests failed: ${e.message ?? ''}`);\n      throw e;\n    }\n  }\n}\n\nconst Home: React.FC = () => {\n  const outputRef = useRef<HTMLDivElement | null>(null);\n  const [output, setOutput] = useState('');\n  const [isDbOpen, setIsDbOpen] = useState(false);\n  const [sections, setSections] = useState<any>({});\n\n  const toggleSection = useCallback(\n    section => {\n      setSections(() => ({\n        ...sections,\n        [section]: !!!sections[section],\n      }));\n    },\n    [sections],\n  );\n\n  const handleOpenChange = useCallback(isOpen => {\n    setIsDbOpen(tester.isOpen);\n  }, []);\n\n  const tester = useMemo<CBLTester>(() => new CBLTester(handleOpenChange), [\n    handleOpenChange,\n  ]);\n\n  const doChange = useCallback(() => {\n    console.log('OUTPUT CHANGED', tester.output);\n    setOutput(tester.output);\n  }, []);\n  useEffect(() => {\n    tester.outputChanged = doChange;\n  }, [tester.output]);\n\n  return (\n    <IonPage>\n      <IonHeader>\n        <IonToolbar>\n          <IonTitle>Couchbase Lite</IonTitle>\n          <IonButtons slot=\"end\">\n            {isDbOpen ? (\n              <IonButton size=\"small\" onClick={() => tester.close()}>\n                <IonIcon\n                  icon={stopCircleOutline}\n                  color=\"#ee2222\"\n                  style={{\n                    fill: '#ee2222',\n                    stroke: '#ee2222',\n                    marginRight: '2px',\n                  }}\n                />\n                Close DB\n              </IonButton>\n            ) : (\n              <IonButton size=\"small\" onClick={() => tester.init()}>\n                <IonIcon\n                  icon={playCircleOutline}\n                  color=\"#22ee22\"\n                  style={{\n                    fill: '#22ee22',\n                    stroke: '#22ee22',\n                    marginRight: '2px',\n                  }}\n                />\n                Open DB\n              </IonButton>\n            )}\n          </IonButtons>\n        </IonToolbar>\n      </IonHeader>\n      <IonContent fullscreen>\n        <IonHeader collapse=\"condense\">\n          <IonToolbar>\n            <IonTitle size=\"large\">Couchbase Lite</IonTitle>\n          </IonToolbar>\n        </IonHeader>\n        <Section\n          title=\"Tests\"\n          expanded={sections['tests']}\n          onToggle={() => toggleSection('tests')}\n        >\n          <IonButton size=\"small\" onClick={() => tester.testSuite()}>\n            Test Suite\n          </IonButton>\n        </Section>\n        <Section\n          title=\"Database\"\n          expanded={sections['db']}\n          onToggle={() => toggleSection('db')}\n        >\n          <IonButton size=\"small\" onClick={() => tester.toggleLogLevel()}>\n            Toggle Log Level\n          </IonButton>\n          <IonButton size=\"small\" onClick={() => tester.setFileConfig()}>\n            Set File Logging Config\n          </IonButton>\n          {/*\n          <IonButton size=\"small\" onClick={() => tester.init()}>Open DB</IonButton>\n          <IonButton size=\"small\" onClick={() => tester.close()}>\n            Close DB\n          </IonButton>\n          */}\n          <IonButton size=\"small\" onClick={() => tester.exists()}>\n            DB Exists\n          </IonButton>\n          {/*\n          <IonButton size=\"small\" onClick={() => tester.queryTest()}>\n            Query Test\n          </IonButton>\n          */}\n          <IonButton size=\"small\" onClick={() => tester.delete()}>\n            Delete DB\n          </IonButton>\n          <IonButton size=\"small\" onClick={() => tester.compact()}>\n            Compact DB\n          </IonButton>\n          <IonButton size=\"small\" onClick={() => tester.getPath()}>\n            Get DB Path\n          </IonButton>\n          <IonButton size=\"small\" onClick={() => tester.delete()}>\n            Delete DB\n          </IonButton>\n        </Section>\n        <Section\n          title=\"Document\"\n          expanded={sections['document']}\n          onToggle={() => toggleSection('document')}\n        >\n          <IonButton size=\"small\" onClick={() => tester.save()}>\n            Save Document\n          </IonButton>\n          <IonButton size=\"small\" onClick={() => tester.saveMany()}>\n            Save Many\n          </IonButton>\n          <IonButton size=\"small\" onClick={() => tester.getCount()}>\n            Get Count\n          </IonButton>\n          <IonButton size=\"small\" onClick={() => tester.update()}>\n            Update Document\n          </IonButton>\n          <IonButton size=\"small\" onClick={() => tester.getDocument()}>\n            Get Document\n          </IonButton>\n          <IonButton size=\"small\" onClick={() => tester.deleteDocument()}>\n            Delete Document\n          </IonButton>\n          <IonButton size=\"small\" onClick={() => tester.purgeDocument()}>\n            Purge Document\n          </IonButton>\n        </Section>\n        <Section\n          title=\"Query\"\n          expanded={sections['query']}\n          onToggle={() => toggleSection('query')}\n        >\n          <IonButton size=\"small\" onClick={() => tester.query1()}>\n            Query 1\n          </IonButton>\n          <IonButton size=\"small\" onClick={() => tester.query1From()}>\n            Query 1 From\n          </IonButton>\n          <IonButton size=\"small\" onClick={() => tester.ftsQuery()}>\n            FTS Query\n          </IonButton>\n          <IonButton size=\"small\" onClick={() => tester.next1()}>\n            Next Result 1\n          </IonButton>\n          <IonButton size=\"small\" onClick={() => tester.nextBatch()}>\n            Next Result Batch 1\n          </IonButton>\n          <IonButton size=\"small\" onClick={() => tester.all1()}>\n            All Results 1\n          </IonButton>\n        </Section>\n        <Section\n          title=\"Query (misc)\"\n          expanded={sections['query-misc']}\n          onToggle={() => toggleSection('query-misc')}\n        >\n          <IonButton size=\"small\" onClick={() => tester.joinTest()}>\n            Join From Test\n          </IonButton>\n          <IonButton size=\"small\" onClick={() => tester.joinTest2()}>\n            Join From Test 2\n          </IonButton>\n          <IonButton size=\"small\" onClick={() => tester.queryDeleted()}>\n            Query Deleted\n          </IonButton>\n          <IonButton size=\"small\" onClick={() => tester.query2()}>\n            Query many\n          </IonButton>\n          <IonButton size=\"small\" onClick={() => tester.all2()}>\n            All Results many\n          </IonButton>\n          <IonButton size=\"small\" onClick={() => tester.allBatched()}>\n            All Results many batched\n          </IonButton>\n          <IonButton size=\"small\" onClick={() => tester.foreach1()}>\n            For Each 1\n          </IonButton>\n          <IonButton size=\"small\" onClick={() => tester.queryCreateTest()}>\n            Query Memory Test\n          </IonButton>\n          <IonButton\n            size=\"small\"\n            onClick={() => tester.queryCreateTestCleanup()}\n          >\n            Query Memory Test Cleanup\n          </IonButton>\n          <IonButton size=\"small\" onClick={() => tester.documentIdTest()}>\n            Document ID Test\n          </IonButton>\n        </Section>\n        <Section\n          title=\"Full Text Search\"\n          expanded={sections['fts']}\n          onToggle={() => toggleSection('fts')}\n        >\n          <IonButton size=\"small\" onClick={() => tester.createIndex()}>\n            Create Index\n          </IonButton>\n          <IonButton size=\"small\" onClick={() => tester.deleteIndex()}>\n            Delete Index\n          </IonButton>\n          <IonButton size=\"small\" onClick={() => tester.getIndexes()}>\n            Get Indexes\n          </IonButton>\n        </Section>\n        <Section\n          title=\"Blob\"\n          expanded={sections['blob']}\n          onToggle={() => toggleSection('blob')}\n        >\n          <IonButton size=\"small\" onClick={() => tester.blobTest()}>\n            Blob Test\n          </IonButton>\n        </Section>\n        <Section\n          title=\"Replicator\"\n          expanded={sections['replicator']}\n          onToggle={() => toggleSection('replicator')}\n        >\n          <IonButton size=\"small\" onClick={() => tester.replicatorStart()}>\n            Replicator Start\n          </IonButton>\n          <IonButton size=\"small\" onClick={() => tester.replicatorStop()}>\n            Replicator Stop\n          </IonButton>\n          <IonButton onClick={() => tester.replicatorResetCheckpoint()}>\n            Replicator Reset Checkpoint\n          </IonButton>\n          <IonButton size=\"small\" onClick={() => tester.replicatorGetStatus()}>\n            Replicator Get Status\n          </IonButton>\n          <IonButton size=\"small\" onClick={() => tester.replicatorTest()}>\n            Replicator Test\n          </IonButton>\n          <IonButton size=\"small\" onClick={() => tester.replicatorTest2()}>\n            Replicator Test 2\n          </IonButton>\n        </Section>\n        <div style={{ height: '500px' }} />\n      </IonContent>\n      <pre\n        id=\"output\"\n        className=\"result-pane\"\n        dangerouslySetInnerHTML={{ __html: output }}\n      />\n    </IonPage>\n  );\n};\n\nconst Section = ({ title, expanded, onToggle, children }) => {\n  return (\n    <IonCard className=\"section\">\n      <IonCardHeader onClick={onToggle}>\n        <IonCardTitle className=\"section-header\">\n          <div className=\"title\">{title}</div>\n          {expanded ? (\n            <IonIcon icon={caretDownOutline} />\n          ) : (\n            <IonIcon icon={caretForwardOutline} />\n          )}\n        </IonCardTitle>\n      </IonCardHeader>\n      {expanded ? <IonCardContent>{children}</IonCardContent> : null}\n    </IonCard>\n  );\n};\n\nexport default Home;\n","import { Redirect, Route } from 'react-router-dom';\nimport { IonApp, IonRouterOutlet } from '@ionic/react';\nimport { IonReactRouter } from '@ionic/react-router';\nimport Home from './pages/Home';\n\n/* Core CSS required for Ionic components to work properly */\nimport '@ionic/react/css/core.css';\n\n/* Basic CSS for apps built with Ionic */\nimport '@ionic/react/css/normalize.css';\nimport '@ionic/react/css/structure.css';\nimport '@ionic/react/css/typography.css';\n\n/* Optional CSS utils that can be commented out */\nimport '@ionic/react/css/padding.css';\nimport '@ionic/react/css/float-elements.css';\nimport '@ionic/react/css/text-alignment.css';\nimport '@ionic/react/css/text-transformation.css';\nimport '@ionic/react/css/flex-utils.css';\nimport '@ionic/react/css/display.css';\n\n/* Theme variables */\nimport './theme/variables.css';\n\nconst App: React.FC = () => (\n  <IonApp>\n    <IonReactRouter>\n      <IonRouterOutlet>\n        <Route exact path=\"/home\">\n          <Home />\n        </Route>\n        <Route exact path=\"/\">\n          <Redirect to=\"/home\" />\n        </Route>\n      </IonRouterOutlet>\n    </IonReactRouter>\n  </IonApp>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}